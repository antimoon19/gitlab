image: python:3.10

stages:
  - style
  - test
  - build
  - deploy

before_script:
  - pip install poetry
  - poetry config virtualenvs.in-project true
  - poetry install
  - source .venv/bin/activate

unittest:
  image : python:$PYTHON_VERSIONS
  stage: test
  parallel :
    matrix :
      - PYTHON_VERSIONS : [ "3.8", "3.9", "3.10"]
  script:
    - poetry run python -m unittest discover tests/unittests

dataset_test:
  image : python:$PYTHON_VERSIONS
  stage: test
  before_script: []
  parallel :
    matrix :
      - PYTHON_VERSIONS : [ "3.8", "3.9", "3.10"]
  script:
    - pip install .
    - python -m unittest discover tests/datasets

#test_nuplan :
#  stage : test
#  image : python:3.9
#  allow_failure : true
#  script :
#    - poetry install -E nuplan
#    - poetry run python -m unittest tests/test_nuplan.py

flake8:
  stage: style
  before_script: []
  script:
    - pip install flake8 flake8-todo
    - flake8 commonroad_dataset_converter
  allow_failure: true

black:
  stage: style
  needs: []
  image: pyfound/black:22.6.0
  before_script: []
  cache: []
  script:
    - black --check --verbose --diff --color commonroad_dataset_converter

sphinx:
  stage: test
  needs: []
  script:
    - poetry install --with doc
    - apt update && apt install -y graphviz
    - cd doc && poetry run make html && poetry run make html SPHINXOPTS="-W"

publish_internal:
  stage: build
  when: manual
  only:
    - master
  script:
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry build
    - poetry publish --repository gitlab -u gitlab-ci-token -p ${CI_JOB_TOKEN}
  environment:
    name: staging
    url: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi

pages:
  stage: deploy
  needs:
    - sphinx
  script:
    - poetry install --with doc
    - apt update && apt install -y graphviz
    - cd doc && poetry run sphinx-build -b html . ../public && poetry run sphinx-build -b html . ../public
  artifacts:
    paths:
      - public
  only:
    - develop

push_to_external_pipy_test_registry:
  stage: deploy
  when: manual
  only:
    - master
  script:
    - poetry config repositories.test https://test.pypi.org/legacy/
    - poetry build
    - poetry publish --repository test -u __token__ -p ${CR_PYPI_TEST_API_TOKEN}

push_to_external_pipy_release_registry:
  stage: deploy
  when: manual
  only:
    - master
  script:
    - poetry build
    - poetry publish -u __token__ -p ${CR_PYPI_RELEASE_API_TOKEN}

